// Gavin Corso - Lab 2 - CS444, Operating Systems II

1. Assuming that the following JOS kernel code is correct, what type should variable x have, uintptr_t or physaddr_t?

uintptr_t is the variable type of x. The JOS kernel can dereference a unintptr_t by casting it to be a pointer,
but it can't dereference a physical address since the address has been translated via the MMU.

2. What entries (rows) in the page directory have been filled in at this point? What addresses do they map and where do they point? In other words, fill out this table as much as possible:

Entry	Base Virtual Address	Points to (logically)
1023	0xffc00000	          Page table for top 4MB of phys memory
1022	0xff800000	          Page table for second 4MB of physical memory
.	    .	                    .
960   0xf0000000            Page table for Physical memory (4MB)
959	  0xefc00000	          Page table for bootstack
958	  0xef800000            Page table for memory-mapped Input and Output	                    .
957   0xef400000            Page table for remaining physical address of pages (see below)
956   0xef000000            First page table for physical address of pages
.     .                     Unmapped
2	    0x00800000	          Unmapped
1	    0x00400000	          Unmapped
0	    0x00000000	          [see next question]



3. We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernelâ€™s memory? What specific mechanisms protect the kernel memory?

The MMU protects kernels memory by enforcing permissions.

4. What is the maximum amount of physical memory that this operating system can support? Why?

256MB, this can be found pmap.h. 0xf0000000 is capped at 256MB after we allocate space for KERNBASE

5. How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?

In total there are 4612KB of overhead

512KB (overhead for 256MB) + 4KB (page directory) + 4096KB (page tables)

6. Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?

This transition occurs shortly after enabling paging. Because the action being performed is a copy, and not a move, this allows us to operate at such a low EIP. This is necessary since the kernel is operating at high virtual addresses.
